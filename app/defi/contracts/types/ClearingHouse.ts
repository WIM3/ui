/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Decimal {
  export type DecimalStruct = { d: PromiseOrValue<BigNumberish> };

  export type DecimalStructOutput = [BigNumber] & { d: BigNumber };
}

export declare namespace SignedDecimal {
  export type SignedDecimalStruct = { d: PromiseOrValue<BigNumberish> };

  export type SignedDecimalStructOutput = [BigNumber] & { d: BigNumber };
}

export declare namespace ClearingHouse {
  export type PositionStruct = {
    size: SignedDecimal.SignedDecimalStruct;
    margin: Decimal.DecimalStruct;
    openNotional: Decimal.DecimalStruct;
    lastUpdatedCumulativePremiumFraction: SignedDecimal.SignedDecimalStruct;
    liquidityHistoryIndex: PromiseOrValue<BigNumberish>;
    blockNumber: PromiseOrValue<BigNumberish>;
  };

  export type PositionStructOutput = [
    SignedDecimal.SignedDecimalStructOutput,
    Decimal.DecimalStructOutput,
    Decimal.DecimalStructOutput,
    SignedDecimal.SignedDecimalStructOutput,
    BigNumber,
    BigNumber
  ] & {
    size: SignedDecimal.SignedDecimalStructOutput;
    margin: Decimal.DecimalStructOutput;
    openNotional: Decimal.DecimalStructOutput;
    lastUpdatedCumulativePremiumFraction: SignedDecimal.SignedDecimalStructOutput;
    liquidityHistoryIndex: BigNumber;
    blockNumber: BigNumber;
  };
}

export interface ClearingHouseInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "implementation()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "addMargin(address,(uint256))": FunctionFragment;
    "backstopLiquidityProviderMap(address)": FunctionFragment;
    "candidate()": FunctionFragment;
    "closePosition(address,(uint256))": FunctionFragment;
    "feePool()": FunctionFragment;
    "getLatestCumulativePremiumFraction(address)": FunctionFragment;
    "getMarginRatio(address,address)": FunctionFragment;
    "getPosition(address,address)": FunctionFragment;
    "getPositionNotionalAndUnrealizedPnl(address,address,uint8)": FunctionFragment;
    "getUnadjustedPosition(address,address)": FunctionFragment;
    "initMarginRatio()": FunctionFragment;
    "initialize(uint256,address)": FunctionFragment;
    "insuranceFund()": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "liquidate(address,address)": FunctionFragment;
    "liquidateWithSlippage(address,address,(uint256))": FunctionFragment;
    "liquidationFeeRatio()": FunctionFragment;
    "maintenanceMarginRatio()": FunctionFragment;
    "openInterestNotionalMap(address)": FunctionFragment;
    "openPosition(address,uint8,(uint256),(uint256),(uint256))": FunctionFragment;
    "owner()": FunctionFragment;
    "partialLiquidationRatio()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "payFunding(address)": FunctionFragment;
    "removeMargin(address,(uint256))": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBackstopLiquidityProvider(address,bool)": FunctionFragment;
    "setFeePool(address)": FunctionFragment;
    "setLiquidationFeeRatio((uint256))": FunctionFragment;
    "setMaintenanceMarginRatio((uint256))": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setPartialLiquidationRatio((uint256))": FunctionFragment;
    "setWhitelist(address)": FunctionFragment;
    "settlePosition(address)": FunctionFragment;
    "trustedForwarder()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateOwner()": FunctionFragment;
    "versionRecipient()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "changeAdmin"
      | "implementation"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "addMargin"
      | "backstopLiquidityProviderMap"
      | "candidate"
      | "closePosition"
      | "feePool"
      | "getLatestCumulativePremiumFraction"
      | "getMarginRatio"
      | "getPosition"
      | "getPositionNotionalAndUnrealizedPnl"
      | "getUnadjustedPosition"
      | "initMarginRatio"
      | "initialize"
      | "insuranceFund"
      | "isTrustedForwarder"
      | "liquidate"
      | "liquidateWithSlippage"
      | "liquidationFeeRatio"
      | "maintenanceMarginRatio"
      | "openInterestNotionalMap"
      | "openPosition"
      | "owner"
      | "partialLiquidationRatio"
      | "pause"
      | "paused"
      | "payFunding"
      | "removeMargin"
      | "renounceOwnership"
      | "setBackstopLiquidityProvider"
      | "setFeePool"
      | "setLiquidationFeeRatio"
      | "setMaintenanceMarginRatio"
      | "setOwner"
      | "setPartialLiquidationRatio"
      | "setWhitelist"
      | "settlePosition"
      | "trustedForwarder"
      | "unpause"
      | "updateOwner"
      | "versionRecipient"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addMargin",
    values: [PromiseOrValue<string>, Decimal.DecimalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "backstopLiquidityProviderMap",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [PromiseOrValue<string>, Decimal.DecimalStruct]
  ): string;
  encodeFunctionData(functionFragment: "feePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLatestCumulativePremiumFraction",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginRatio",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionNotionalAndUnrealizedPnl",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnadjustedPosition",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initMarginRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateWithSlippage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      Decimal.DecimalStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationFeeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maintenanceMarginRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openInterestNotionalMap",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      Decimal.DecimalStruct,
      Decimal.DecimalStruct,
      Decimal.DecimalStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partialLiquidationRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payFunding",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMargin",
    values: [PromiseOrValue<string>, Decimal.DecimalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBackstopLiquidityProvider",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationFeeRatio",
    values: [Decimal.DecimalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaintenanceMarginRatio",
    values: [Decimal.DecimalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartialLiquidationRatio",
    values: [Decimal.DecimalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settlePosition",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "versionRecipient",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMargin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "backstopLiquidityProviderMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLatestCumulativePremiumFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionNotionalAndUnrealizedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnadjustedPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateWithSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maintenanceMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openInterestNotionalMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partialLiquidationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payFunding", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBackstopLiquidityProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaintenanceMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPartialLiquidationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionRecipient",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "BackstopLiquidityProviderChanged(address,bool)": EventFragment;
    "InitMarginRatioChanged(uint256)": EventFragment;
    "InsuranceFundChanged(address)": EventFragment;
    "LiquidationFeeRatioChanged(uint256)": EventFragment;
    "MarginChanged(address,address,int256,int256)": EventFragment;
    "MarginRatioChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PositionAdjusted(address,address,int256,uint256,uint256)": EventFragment;
    "PositionChanged(address,address,uint256,uint256,int256,uint256,int256,int256,int256,uint256,uint256,uint256,int256)": EventFragment;
    "PositionLiquidated(address,address,uint256,uint256,uint256,address,uint256)": EventFragment;
    "PositionSettled(address,address,uint256)": EventFragment;
    "ReferredPositionChanged(bytes32)": EventFragment;
    "RestrictionModeEntered(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BackstopLiquidityProviderChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitMarginRatioChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsuranceFundChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationFeeRatioChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarginChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarginRatioChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionAdjusted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferredPositionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RestrictionModeEntered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface BackstopLiquidityProviderChangedEventObject {
  account: string;
  isProvider: boolean;
}
export type BackstopLiquidityProviderChangedEvent = TypedEvent<
  [string, boolean],
  BackstopLiquidityProviderChangedEventObject
>;

export type BackstopLiquidityProviderChangedEventFilter =
  TypedEventFilter<BackstopLiquidityProviderChangedEvent>;

export interface InitMarginRatioChangedEventObject {
  initMarginRatio: BigNumber;
}
export type InitMarginRatioChangedEvent = TypedEvent<
  [BigNumber],
  InitMarginRatioChangedEventObject
>;

export type InitMarginRatioChangedEventFilter =
  TypedEventFilter<InitMarginRatioChangedEvent>;

export interface InsuranceFundChangedEventObject {
  insuranceFund: string;
}
export type InsuranceFundChangedEvent = TypedEvent<
  [string],
  InsuranceFundChangedEventObject
>;

export type InsuranceFundChangedEventFilter =
  TypedEventFilter<InsuranceFundChangedEvent>;

export interface LiquidationFeeRatioChangedEventObject {
  liquidationFeeRatio: BigNumber;
}
export type LiquidationFeeRatioChangedEvent = TypedEvent<
  [BigNumber],
  LiquidationFeeRatioChangedEventObject
>;

export type LiquidationFeeRatioChangedEventFilter =
  TypedEventFilter<LiquidationFeeRatioChangedEvent>;

export interface MarginChangedEventObject {
  sender: string;
  amm: string;
  amount: BigNumber;
  fundingPayment: BigNumber;
}
export type MarginChangedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  MarginChangedEventObject
>;

export type MarginChangedEventFilter = TypedEventFilter<MarginChangedEvent>;

export interface MarginRatioChangedEventObject {
  marginRatio: BigNumber;
}
export type MarginRatioChangedEvent = TypedEvent<
  [BigNumber],
  MarginRatioChangedEventObject
>;

export type MarginRatioChangedEventFilter =
  TypedEventFilter<MarginRatioChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PositionAdjustedEventObject {
  amm: string;
  trader: string;
  newPositionSize: BigNumber;
  oldLiquidityIndex: BigNumber;
  newLiquidityIndex: BigNumber;
}
export type PositionAdjustedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  PositionAdjustedEventObject
>;

export type PositionAdjustedEventFilter =
  TypedEventFilter<PositionAdjustedEvent>;

export interface PositionChangedEventObject {
  trader: string;
  amm: string;
  margin: BigNumber;
  positionNotional: BigNumber;
  exchangedPositionSize: BigNumber;
  fee: BigNumber;
  positionSizeAfter: BigNumber;
  realizedPnl: BigNumber;
  unrealizedPnlAfter: BigNumber;
  badDebt: BigNumber;
  liquidationPenalty: BigNumber;
  spotPrice: BigNumber;
  fundingPayment: BigNumber;
}
export type PositionChangedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  PositionChangedEventObject
>;

export type PositionChangedEventFilter = TypedEventFilter<PositionChangedEvent>;

export interface PositionLiquidatedEventObject {
  trader: string;
  amm: string;
  positionNotional: BigNumber;
  positionSize: BigNumber;
  liquidationFee: BigNumber;
  liquidator: string;
  badDebt: BigNumber;
}
export type PositionLiquidatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string, BigNumber],
  PositionLiquidatedEventObject
>;

export type PositionLiquidatedEventFilter =
  TypedEventFilter<PositionLiquidatedEvent>;

export interface PositionSettledEventObject {
  amm: string;
  trader: string;
  valueTransferred: BigNumber;
}
export type PositionSettledEvent = TypedEvent<
  [string, string, BigNumber],
  PositionSettledEventObject
>;

export type PositionSettledEventFilter = TypedEventFilter<PositionSettledEvent>;

export interface ReferredPositionChangedEventObject {
  referralCode: string;
}
export type ReferredPositionChangedEvent = TypedEvent<
  [string],
  ReferredPositionChangedEventObject
>;

export type ReferredPositionChangedEventFilter =
  TypedEventFilter<ReferredPositionChangedEvent>;

export interface RestrictionModeEnteredEventObject {
  amm: string;
  blockNumber: BigNumber;
}
export type RestrictionModeEnteredEvent = TypedEvent<
  [string, BigNumber],
  RestrictionModeEnteredEventObject
>;

export type RestrictionModeEnteredEventFilter =
  TypedEventFilter<RestrictionModeEnteredEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ClearingHouse extends BaseContract {
  contractName: "ClearingHouse";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClearingHouseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    implementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMargin(
      _amm: PromiseOrValue<string>,
      _addedMargin: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    backstopLiquidityProviderMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    closePosition(
      _amm: PromiseOrValue<string>,
      _quoteAssetAmountLimit: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feePool(overrides?: CallOverrides): Promise<[string]>;

    getLatestCumulativePremiumFraction(
      _amm: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[SignedDecimal.SignedDecimalStructOutput]>;

    getMarginRatio(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[SignedDecimal.SignedDecimalStructOutput]>;

    getPosition(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ClearingHouse.PositionStructOutput]>;

    getPositionNotionalAndUnrealizedPnl(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      _pnlCalcOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [Decimal.DecimalStructOutput, SignedDecimal.SignedDecimalStructOutput] & {
        positionNotional: Decimal.DecimalStructOutput;
        unrealizedPnl: SignedDecimal.SignedDecimalStructOutput;
      }
    >;

    getUnadjustedPosition(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ClearingHouse.PositionStructOutput] & {
        position: ClearingHouse.PositionStructOutput;
      }
    >;

    initMarginRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    initialize(
      _initMarginRatio: PromiseOrValue<BigNumberish>,
      _insuranceFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insuranceFund(overrides?: CallOverrides): Promise<[string]>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidate(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidateWithSlippage(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      _quoteAssetAmountLimit: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidationFeeRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    maintenanceMarginRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    openInterestNotionalMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    openPosition(
      _amm: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _quoteAssetAmount: Decimal.DecimalStruct,
      _leverage: Decimal.DecimalStruct,
      _baseAssetAmountLimit: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    partialLiquidationRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    payFunding(
      _amm: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMargin(
      _amm: PromiseOrValue<string>,
      _removedMargin: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBackstopLiquidityProvider(
      account: PromiseOrValue<string>,
      isProvider: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeePool(
      _feePool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidationFeeRatio(
      _liquidationFeeRatio: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaintenanceMarginRatio(
      _maintenanceMarginRatio: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPartialLiquidationRatio(
      _ratio: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
      _whitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settlePosition(
      _amm: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    versionRecipient(overrides?: CallOverrides): Promise<[string]>;
  };

  admin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  implementation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMargin(
    _amm: PromiseOrValue<string>,
    _addedMargin: Decimal.DecimalStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  backstopLiquidityProviderMap(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  candidate(overrides?: CallOverrides): Promise<string>;

  closePosition(
    _amm: PromiseOrValue<string>,
    _quoteAssetAmountLimit: Decimal.DecimalStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feePool(overrides?: CallOverrides): Promise<string>;

  getLatestCumulativePremiumFraction(
    _amm: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<SignedDecimal.SignedDecimalStructOutput>;

  getMarginRatio(
    _amm: PromiseOrValue<string>,
    _trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<SignedDecimal.SignedDecimalStructOutput>;

  getPosition(
    _amm: PromiseOrValue<string>,
    _trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ClearingHouse.PositionStructOutput>;

  getPositionNotionalAndUnrealizedPnl(
    _amm: PromiseOrValue<string>,
    _trader: PromiseOrValue<string>,
    _pnlCalcOption: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [Decimal.DecimalStructOutput, SignedDecimal.SignedDecimalStructOutput] & {
      positionNotional: Decimal.DecimalStructOutput;
      unrealizedPnl: SignedDecimal.SignedDecimalStructOutput;
    }
  >;

  getUnadjustedPosition(
    _amm: PromiseOrValue<string>,
    _trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ClearingHouse.PositionStructOutput>;

  initMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _initMarginRatio: PromiseOrValue<BigNumberish>,
    _insuranceFund: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  insuranceFund(overrides?: CallOverrides): Promise<string>;

  isTrustedForwarder(
    forwarder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidate(
    _amm: PromiseOrValue<string>,
    _trader: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidateWithSlippage(
    _amm: PromiseOrValue<string>,
    _trader: PromiseOrValue<string>,
    _quoteAssetAmountLimit: Decimal.DecimalStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidationFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

  maintenanceMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

  openInterestNotionalMap(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openPosition(
    _amm: PromiseOrValue<string>,
    _side: PromiseOrValue<BigNumberish>,
    _quoteAssetAmount: Decimal.DecimalStruct,
    _leverage: Decimal.DecimalStruct,
    _baseAssetAmountLimit: Decimal.DecimalStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  partialLiquidationRatio(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  payFunding(
    _amm: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMargin(
    _amm: PromiseOrValue<string>,
    _removedMargin: Decimal.DecimalStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBackstopLiquidityProvider(
    account: PromiseOrValue<string>,
    isProvider: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeePool(
    _feePool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidationFeeRatio(
    _liquidationFeeRatio: Decimal.DecimalStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaintenanceMarginRatio(
    _maintenanceMarginRatio: Decimal.DecimalStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPartialLiquidationRatio(
    _ratio: Decimal.DecimalStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWhitelist(
    _whitelist: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settlePosition(
    _amm: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trustedForwarder(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOwner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  versionRecipient(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    implementation(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addMargin(
      _amm: PromiseOrValue<string>,
      _addedMargin: Decimal.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    backstopLiquidityProviderMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    candidate(overrides?: CallOverrides): Promise<string>;

    closePosition(
      _amm: PromiseOrValue<string>,
      _quoteAssetAmountLimit: Decimal.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    feePool(overrides?: CallOverrides): Promise<string>;

    getLatestCumulativePremiumFraction(
      _amm: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<SignedDecimal.SignedDecimalStructOutput>;

    getMarginRatio(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<SignedDecimal.SignedDecimalStructOutput>;

    getPosition(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ClearingHouse.PositionStructOutput>;

    getPositionNotionalAndUnrealizedPnl(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      _pnlCalcOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [Decimal.DecimalStructOutput, SignedDecimal.SignedDecimalStructOutput] & {
        positionNotional: Decimal.DecimalStructOutput;
        unrealizedPnl: SignedDecimal.SignedDecimalStructOutput;
      }
    >;

    getUnadjustedPosition(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ClearingHouse.PositionStructOutput>;

    initMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _initMarginRatio: PromiseOrValue<BigNumberish>,
      _insuranceFund: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    insuranceFund(overrides?: CallOverrides): Promise<string>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidate(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateWithSlippage(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      _quoteAssetAmountLimit: Decimal.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<
      [Decimal.DecimalStructOutput, boolean] & {
        quoteAssetAmount: Decimal.DecimalStructOutput;
        isPartialClose: boolean;
      }
    >;

    liquidationFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    maintenanceMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

    openInterestNotionalMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      _amm: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _quoteAssetAmount: Decimal.DecimalStruct,
      _leverage: Decimal.DecimalStruct,
      _baseAssetAmountLimit: Decimal.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    partialLiquidationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    payFunding(
      _amm: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMargin(
      _amm: PromiseOrValue<string>,
      _removedMargin: Decimal.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBackstopLiquidityProvider(
      account: PromiseOrValue<string>,
      isProvider: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeePool(
      _feePool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationFeeRatio(
      _liquidationFeeRatio: Decimal.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaintenanceMarginRatio(
      _maintenanceMarginRatio: Decimal.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPartialLiquidationRatio(
      _ratio: Decimal.DecimalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelist(
      _whitelist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settlePosition(
      _amm: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedForwarder(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    versionRecipient(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "BackstopLiquidityProviderChanged(address,bool)"(
      account?: PromiseOrValue<string> | null,
      isProvider?: PromiseOrValue<boolean> | null
    ): BackstopLiquidityProviderChangedEventFilter;
    BackstopLiquidityProviderChanged(
      account?: PromiseOrValue<string> | null,
      isProvider?: PromiseOrValue<boolean> | null
    ): BackstopLiquidityProviderChangedEventFilter;

    "InitMarginRatioChanged(uint256)"(
      initMarginRatio?: null
    ): InitMarginRatioChangedEventFilter;
    InitMarginRatioChanged(
      initMarginRatio?: null
    ): InitMarginRatioChangedEventFilter;

    "InsuranceFundChanged(address)"(
      insuranceFund?: null
    ): InsuranceFundChangedEventFilter;
    InsuranceFundChanged(insuranceFund?: null): InsuranceFundChangedEventFilter;

    "LiquidationFeeRatioChanged(uint256)"(
      liquidationFeeRatio?: null
    ): LiquidationFeeRatioChangedEventFilter;
    LiquidationFeeRatioChanged(
      liquidationFeeRatio?: null
    ): LiquidationFeeRatioChangedEventFilter;

    "MarginChanged(address,address,int256,int256)"(
      sender?: PromiseOrValue<string> | null,
      amm?: PromiseOrValue<string> | null,
      amount?: null,
      fundingPayment?: null
    ): MarginChangedEventFilter;
    MarginChanged(
      sender?: PromiseOrValue<string> | null,
      amm?: PromiseOrValue<string> | null,
      amount?: null,
      fundingPayment?: null
    ): MarginChangedEventFilter;

    "MarginRatioChanged(uint256)"(
      marginRatio?: null
    ): MarginRatioChangedEventFilter;
    MarginRatioChanged(marginRatio?: null): MarginRatioChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PositionAdjusted(address,address,int256,uint256,uint256)"(
      amm?: PromiseOrValue<string> | null,
      trader?: PromiseOrValue<string> | null,
      newPositionSize?: null,
      oldLiquidityIndex?: null,
      newLiquidityIndex?: null
    ): PositionAdjustedEventFilter;
    PositionAdjusted(
      amm?: PromiseOrValue<string> | null,
      trader?: PromiseOrValue<string> | null,
      newPositionSize?: null,
      oldLiquidityIndex?: null,
      newLiquidityIndex?: null
    ): PositionAdjustedEventFilter;

    "PositionChanged(address,address,uint256,uint256,int256,uint256,int256,int256,int256,uint256,uint256,uint256,int256)"(
      trader?: PromiseOrValue<string> | null,
      amm?: PromiseOrValue<string> | null,
      margin?: null,
      positionNotional?: null,
      exchangedPositionSize?: null,
      fee?: null,
      positionSizeAfter?: null,
      realizedPnl?: null,
      unrealizedPnlAfter?: null,
      badDebt?: null,
      liquidationPenalty?: null,
      spotPrice?: null,
      fundingPayment?: null
    ): PositionChangedEventFilter;
    PositionChanged(
      trader?: PromiseOrValue<string> | null,
      amm?: PromiseOrValue<string> | null,
      margin?: null,
      positionNotional?: null,
      exchangedPositionSize?: null,
      fee?: null,
      positionSizeAfter?: null,
      realizedPnl?: null,
      unrealizedPnlAfter?: null,
      badDebt?: null,
      liquidationPenalty?: null,
      spotPrice?: null,
      fundingPayment?: null
    ): PositionChangedEventFilter;

    "PositionLiquidated(address,address,uint256,uint256,uint256,address,uint256)"(
      trader?: PromiseOrValue<string> | null,
      amm?: PromiseOrValue<string> | null,
      positionNotional?: null,
      positionSize?: null,
      liquidationFee?: null,
      liquidator?: null,
      badDebt?: null
    ): PositionLiquidatedEventFilter;
    PositionLiquidated(
      trader?: PromiseOrValue<string> | null,
      amm?: PromiseOrValue<string> | null,
      positionNotional?: null,
      positionSize?: null,
      liquidationFee?: null,
      liquidator?: null,
      badDebt?: null
    ): PositionLiquidatedEventFilter;

    "PositionSettled(address,address,uint256)"(
      amm?: PromiseOrValue<string> | null,
      trader?: PromiseOrValue<string> | null,
      valueTransferred?: null
    ): PositionSettledEventFilter;
    PositionSettled(
      amm?: PromiseOrValue<string> | null,
      trader?: PromiseOrValue<string> | null,
      valueTransferred?: null
    ): PositionSettledEventFilter;

    "ReferredPositionChanged(bytes32)"(
      referralCode?: PromiseOrValue<BytesLike> | null
    ): ReferredPositionChangedEventFilter;
    ReferredPositionChanged(
      referralCode?: PromiseOrValue<BytesLike> | null
    ): ReferredPositionChangedEventFilter;

    "RestrictionModeEntered(address,uint256)"(
      amm?: null,
      blockNumber?: null
    ): RestrictionModeEnteredEventFilter;
    RestrictionModeEntered(
      amm?: null,
      blockNumber?: null
    ): RestrictionModeEnteredEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    implementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMargin(
      _amm: PromiseOrValue<string>,
      _addedMargin: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    backstopLiquidityProviderMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    closePosition(
      _amm: PromiseOrValue<string>,
      _quoteAssetAmountLimit: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feePool(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestCumulativePremiumFraction(
      _amm: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginRatio(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionNotionalAndUnrealizedPnl(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      _pnlCalcOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnadjustedPosition(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _initMarginRatio: PromiseOrValue<BigNumberish>,
      _insuranceFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    insuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidateWithSlippage(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      _quoteAssetAmountLimit: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidationFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    maintenanceMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

    openInterestNotionalMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      _amm: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _quoteAssetAmount: Decimal.DecimalStruct,
      _leverage: Decimal.DecimalStruct,
      _baseAssetAmountLimit: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    partialLiquidationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    payFunding(
      _amm: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMargin(
      _amm: PromiseOrValue<string>,
      _removedMargin: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBackstopLiquidityProvider(
      account: PromiseOrValue<string>,
      isProvider: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeePool(
      _feePool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidationFeeRatio(
      _liquidationFeeRatio: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaintenanceMarginRatio(
      _maintenanceMarginRatio: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPartialLiquidationRatio(
      _ratio: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWhitelist(
      _whitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settlePosition(
      _amm: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    versionRecipient(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    implementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMargin(
      _amm: PromiseOrValue<string>,
      _addedMargin: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    backstopLiquidityProviderMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closePosition(
      _amm: PromiseOrValue<string>,
      _quoteAssetAmountLimit: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestCumulativePremiumFraction(
      _amm: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginRatio(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionNotionalAndUnrealizedPnl(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      _pnlCalcOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnadjustedPosition(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initMarginRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _initMarginRatio: PromiseOrValue<BigNumberish>,
      _insuranceFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    insuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidateWithSlippage(
      _amm: PromiseOrValue<string>,
      _trader: PromiseOrValue<string>,
      _quoteAssetAmountLimit: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidationFeeRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maintenanceMarginRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openInterestNotionalMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPosition(
      _amm: PromiseOrValue<string>,
      _side: PromiseOrValue<BigNumberish>,
      _quoteAssetAmount: Decimal.DecimalStruct,
      _leverage: Decimal.DecimalStruct,
      _baseAssetAmountLimit: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partialLiquidationRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payFunding(
      _amm: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMargin(
      _amm: PromiseOrValue<string>,
      _removedMargin: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBackstopLiquidityProvider(
      account: PromiseOrValue<string>,
      isProvider: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeePool(
      _feePool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationFeeRatio(
      _liquidationFeeRatio: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaintenanceMarginRatio(
      _maintenanceMarginRatio: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPartialLiquidationRatio(
      _ratio: Decimal.DecimalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      _whitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settlePosition(
      _amm: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    versionRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
