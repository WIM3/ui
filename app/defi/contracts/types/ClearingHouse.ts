/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IClearingHouse {
  export type AddLiquidityParamsStruct = {
    baseToken: PromiseOrValue<string>;
    base: PromiseOrValue<BigNumberish>;
    quote: PromiseOrValue<BigNumberish>;
    lowerTick: PromiseOrValue<BigNumberish>;
    upperTick: PromiseOrValue<BigNumberish>;
    minBase: PromiseOrValue<BigNumberish>;
    minQuote: PromiseOrValue<BigNumberish>;
    useTakerBalance: PromiseOrValue<boolean>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type AddLiquidityParamsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    baseToken: string;
    base: BigNumber;
    quote: BigNumber;
    lowerTick: number;
    upperTick: number;
    minBase: BigNumber;
    minQuote: BigNumber;
    useTakerBalance: boolean;
    deadline: BigNumber;
  };

  export type AddLiquidityResponseStruct = {
    base: PromiseOrValue<BigNumberish>;
    quote: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
  };

  export type AddLiquidityResponseStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    base: BigNumber;
    quote: BigNumber;
    fee: BigNumber;
    liquidity: BigNumber;
  };

  export type ClosePositionParamsStruct = {
    baseToken: PromiseOrValue<string>;
    sqrtPriceLimitX96: PromiseOrValue<BigNumberish>;
    oppositeAmountBound: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    referralCode: PromiseOrValue<BytesLike>;
  };

  export type ClosePositionParamsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    baseToken: string;
    sqrtPriceLimitX96: BigNumber;
    oppositeAmountBound: BigNumber;
    deadline: BigNumber;
    referralCode: string;
  };

  export type OpenPositionParamsStruct = {
    baseToken: PromiseOrValue<string>;
    isBaseToQuote: PromiseOrValue<boolean>;
    isExactInput: PromiseOrValue<boolean>;
    amount: PromiseOrValue<BigNumberish>;
    oppositeAmountBound: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    sqrtPriceLimitX96: PromiseOrValue<BigNumberish>;
    referralCode: PromiseOrValue<BytesLike>;
  };

  export type OpenPositionParamsStructOutput = [
    string,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    baseToken: string;
    isBaseToQuote: boolean;
    isExactInput: boolean;
    amount: BigNumber;
    oppositeAmountBound: BigNumber;
    deadline: BigNumber;
    sqrtPriceLimitX96: BigNumber;
    referralCode: string;
  };

  export type RemoveLiquidityParamsStruct = {
    baseToken: PromiseOrValue<string>;
    lowerTick: PromiseOrValue<BigNumberish>;
    upperTick: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    minBase: PromiseOrValue<BigNumberish>;
    minQuote: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type RemoveLiquidityParamsStructOutput = [
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    baseToken: string;
    lowerTick: number;
    upperTick: number;
    liquidity: BigNumber;
    minBase: BigNumber;
    minQuote: BigNumber;
    deadline: BigNumber;
  };

  export type RemoveLiquidityResponseStruct = {
    base: PromiseOrValue<BigNumberish>;
    quote: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
  };

  export type RemoveLiquidityResponseStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & { base: BigNumber; quote: BigNumber; fee: BigNumber };
}

export interface ClearingHouseInterface extends utils.Interface {
  functions: {
    "addLiquidity((address,uint256,uint256,int24,int24,uint256,uint256,bool,uint256))": FunctionFragment;
    "cancelAllExcessOrders(address,address)": FunctionFragment;
    "cancelExcessOrders(address,address,bytes32[])": FunctionFragment;
    "candidate()": FunctionFragment;
    "closePosition((address,uint160,uint256,uint256,bytes32))": FunctionFragment;
    "getAccountBalance()": FunctionFragment;
    "getAccountValue(address)": FunctionFragment;
    "getClearingHouseConfig()": FunctionFragment;
    "getDelegateApproval()": FunctionFragment;
    "getExchange()": FunctionFragment;
    "getInsuranceFund()": FunctionFragment;
    "getOrderBook()": FunctionFragment;
    "getQuoteToken()": FunctionFragment;
    "getTrustedForwarder()": FunctionFragment;
    "getUniswapV3Factory()": FunctionFragment;
    "getVault()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "liquidate(address,address,int256)": FunctionFragment;
    "liquidate(address,address)": FunctionFragment;
    "openPosition((address,bool,bool,uint256,uint256,uint256,uint160,bytes32))": FunctionFragment;
    "openPositionFor(address,(address,bool,bool,uint256,uint256,uint256,uint160,bytes32))": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "quitMarket(address,address)": FunctionFragment;
    "removeLiquidity((address,int24,int24,uint128,uint256,uint256,uint256))": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDelegateApproval(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "settleAllFunding(address)": FunctionFragment;
    "uniswapV3MintCallback(uint256,uint256,bytes)": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateOwner()": FunctionFragment;
    "versionRecipient()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "cancelAllExcessOrders"
      | "cancelExcessOrders"
      | "candidate"
      | "closePosition"
      | "getAccountBalance"
      | "getAccountValue"
      | "getClearingHouseConfig"
      | "getDelegateApproval"
      | "getExchange"
      | "getInsuranceFund"
      | "getOrderBook"
      | "getQuoteToken"
      | "getTrustedForwarder"
      | "getUniswapV3Factory"
      | "getVault"
      | "initialize"
      | "isTrustedForwarder"
      | "liquidate(address,address,int256)"
      | "liquidate(address,address)"
      | "openPosition"
      | "openPositionFor"
      | "owner"
      | "pause"
      | "paused"
      | "quitMarket"
      | "removeLiquidity"
      | "renounceOwnership"
      | "setDelegateApproval"
      | "setOwner"
      | "settleAllFunding"
      | "uniswapV3MintCallback"
      | "uniswapV3SwapCallback"
      | "unpause"
      | "updateOwner"
      | "versionRecipient"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [IClearingHouse.AddLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAllExcessOrders",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelExcessOrders",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [IClearingHouse.ClosePositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingHouseConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegateApproval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInsuranceFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV3Factory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate(address,address,int256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [IClearingHouse.OpenPositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionFor",
    values: [PromiseOrValue<string>, IClearingHouse.OpenPositionParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quitMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [IClearingHouse.RemoveLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegateApproval",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAllFunding",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3MintCallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "versionRecipient",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAllExcessOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelExcessOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegateApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidate(address,address,int256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidate(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quitMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegateApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleAllFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3MintCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionRecipient",
    data: BytesLike
  ): Result;

  events: {
    "DelegateApprovalChanged(address)": EventFragment;
    "FundingPaymentSettled(address,address,int256)": EventFragment;
    "LiquidityChanged(address,address,address,int24,int24,int256,int256,int128,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PositionChanged(address,address,int256,int256,uint256,int256,int256,uint256)": EventFragment;
    "PositionClosed(address,address,int256,int256,int256,int256,uint256)": EventFragment;
    "PositionLiquidated(address,address,uint256,uint256,uint256,address)": EventFragment;
    "ReferredPositionChanged(bytes32)": EventFragment;
    "TrustedForwarderChanged(address)": EventFragment;
    "TrustedForwarderUpdated(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateApprovalChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingPaymentSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferredPositionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedForwarderChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedForwarderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface DelegateApprovalChangedEventObject {
  delegateApproval: string;
}
export type DelegateApprovalChangedEvent = TypedEvent<
  [string],
  DelegateApprovalChangedEventObject
>;

export type DelegateApprovalChangedEventFilter =
  TypedEventFilter<DelegateApprovalChangedEvent>;

export interface FundingPaymentSettledEventObject {
  trader: string;
  baseToken: string;
  fundingPayment: BigNumber;
}
export type FundingPaymentSettledEvent = TypedEvent<
  [string, string, BigNumber],
  FundingPaymentSettledEventObject
>;

export type FundingPaymentSettledEventFilter =
  TypedEventFilter<FundingPaymentSettledEvent>;

export interface LiquidityChangedEventObject {
  maker: string;
  baseToken: string;
  quoteToken: string;
  lowerTick: number;
  upperTick: number;
  base: BigNumber;
  quote: BigNumber;
  liquidity: BigNumber;
  quoteFee: BigNumber;
}
export type LiquidityChangedEvent = TypedEvent<
  [
    string,
    string,
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  LiquidityChangedEventObject
>;

export type LiquidityChangedEventFilter =
  TypedEventFilter<LiquidityChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PositionChangedEventObject {
  trader: string;
  baseToken: string;
  exchangedPositionSize: BigNumber;
  exchangedPositionNotional: BigNumber;
  fee: BigNumber;
  openNotional: BigNumber;
  realizedPnl: BigNumber;
  sqrtPriceAfterX96: BigNumber;
}
export type PositionChangedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  PositionChangedEventObject
>;

export type PositionChangedEventFilter = TypedEventFilter<PositionChangedEvent>;

export interface PositionClosedEventObject {
  trader: string;
  baseToken: string;
  closedPositionSize: BigNumber;
  closedPositionNotional: BigNumber;
  openNotional: BigNumber;
  realizedPnl: BigNumber;
  closedPrice: BigNumber;
}
export type PositionClosedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  PositionClosedEventObject
>;

export type PositionClosedEventFilter = TypedEventFilter<PositionClosedEvent>;

export interface PositionLiquidatedEventObject {
  trader: string;
  baseToken: string;
  positionNotional: BigNumber;
  positionSize: BigNumber;
  liquidationFee: BigNumber;
  liquidator: string;
}
export type PositionLiquidatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  PositionLiquidatedEventObject
>;

export type PositionLiquidatedEventFilter =
  TypedEventFilter<PositionLiquidatedEvent>;

export interface ReferredPositionChangedEventObject {
  referralCode: string;
}
export type ReferredPositionChangedEvent = TypedEvent<
  [string],
  ReferredPositionChangedEventObject
>;

export type ReferredPositionChangedEventFilter =
  TypedEventFilter<ReferredPositionChangedEvent>;

export interface TrustedForwarderChangedEventObject {
  forwarder: string;
}
export type TrustedForwarderChangedEvent = TypedEvent<
  [string],
  TrustedForwarderChangedEventObject
>;

export type TrustedForwarderChangedEventFilter =
  TypedEventFilter<TrustedForwarderChangedEvent>;

export interface TrustedForwarderUpdatedEventObject {
  trustedForwarder: string;
}
export type TrustedForwarderUpdatedEvent = TypedEvent<
  [string],
  TrustedForwarderUpdatedEventObject
>;

export type TrustedForwarderUpdatedEventFilter =
  TypedEventFilter<TrustedForwarderUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ClearingHouse extends BaseContract {
  contractName: "ClearingHouse";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClearingHouseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      params: IClearingHouse.AddLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelAllExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      orderIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    closePosition(
      params: IClearingHouse.ClosePositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountBalance(overrides?: CallOverrides): Promise<[string]>;

    getAccountValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<[string]>;

    getDelegateApproval(overrides?: CallOverrides): Promise<[string]>;

    getExchange(overrides?: CallOverrides): Promise<[string]>;

    getInsuranceFund(overrides?: CallOverrides): Promise<[string]>;

    getOrderBook(overrides?: CallOverrides): Promise<[string]>;

    getQuoteToken(overrides?: CallOverrides): Promise<[string]>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<[string]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      clearingHouseConfigArg: PromiseOrValue<string>,
      vaultArg: PromiseOrValue<string>,
      quoteTokenArg: PromiseOrValue<string>,
      uniV3FactoryArg: PromiseOrValue<string>,
      exchangeArg: PromiseOrValue<string>,
      accountBalanceArg: PromiseOrValue<string>,
      insuranceFundArg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "liquidate(address,address,int256)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      positionSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "liquidate(address,address)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openPositionFor(
      trader: PromiseOrValue<string>,
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    quitMarket(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      params: IClearingHouse.RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelegateApproval(
      delegateApprovalArg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleAllFunding(
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV3MintCallback(
      amount0Owed: PromiseOrValue<BigNumberish>,
      amount1Owed: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    versionRecipient(overrides?: CallOverrides): Promise<[string]>;
  };

  addLiquidity(
    params: IClearingHouse.AddLiquidityParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelAllExcessOrders(
    maker: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelExcessOrders(
    maker: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    orderIds: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  closePosition(
    params: IClearingHouse.ClosePositionParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountBalance(overrides?: CallOverrides): Promise<string>;

  getAccountValue(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

  getDelegateApproval(overrides?: CallOverrides): Promise<string>;

  getExchange(overrides?: CallOverrides): Promise<string>;

  getInsuranceFund(overrides?: CallOverrides): Promise<string>;

  getOrderBook(overrides?: CallOverrides): Promise<string>;

  getQuoteToken(overrides?: CallOverrides): Promise<string>;

  getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

  getUniswapV3Factory(overrides?: CallOverrides): Promise<string>;

  getVault(overrides?: CallOverrides): Promise<string>;

  initialize(
    clearingHouseConfigArg: PromiseOrValue<string>,
    vaultArg: PromiseOrValue<string>,
    quoteTokenArg: PromiseOrValue<string>,
    uniV3FactoryArg: PromiseOrValue<string>,
    exchangeArg: PromiseOrValue<string>,
    accountBalanceArg: PromiseOrValue<string>,
    insuranceFundArg: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "liquidate(address,address,int256)"(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    positionSize: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "liquidate(address,address)"(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openPosition(
    params: IClearingHouse.OpenPositionParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openPositionFor(
    trader: PromiseOrValue<string>,
    params: IClearingHouse.OpenPositionParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  quitMarket(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    params: IClearingHouse.RemoveLiquidityParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelegateApproval(
    delegateApprovalArg: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleAllFunding(
    trader: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV3MintCallback(
    amount0Owed: PromiseOrValue<BigNumberish>,
    amount1Owed: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: PromiseOrValue<BigNumberish>,
    amount1Delta: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOwner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  versionRecipient(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addLiquidity(
      params: IClearingHouse.AddLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<IClearingHouse.AddLiquidityResponseStructOutput>;

    cancelAllExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      orderIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    candidate(overrides?: CallOverrides): Promise<string>;

    closePosition(
      params: IClearingHouse.ClosePositionParamsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { base: BigNumber; quote: BigNumber }>;

    getAccountBalance(overrides?: CallOverrides): Promise<string>;

    getAccountValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

    getDelegateApproval(overrides?: CallOverrides): Promise<string>;

    getExchange(overrides?: CallOverrides): Promise<string>;

    getInsuranceFund(overrides?: CallOverrides): Promise<string>;

    getOrderBook(overrides?: CallOverrides): Promise<string>;

    getQuoteToken(overrides?: CallOverrides): Promise<string>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<string>;

    getVault(overrides?: CallOverrides): Promise<string>;

    initialize(
      clearingHouseConfigArg: PromiseOrValue<string>,
      vaultArg: PromiseOrValue<string>,
      quoteTokenArg: PromiseOrValue<string>,
      uniV3FactoryArg: PromiseOrValue<string>,
      exchangeArg: PromiseOrValue<string>,
      accountBalanceArg: PromiseOrValue<string>,
      insuranceFundArg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "liquidate(address,address,int256)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      positionSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidate(address,address)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { base: BigNumber; quote: BigNumber }>;

    openPositionFor(
      trader: PromiseOrValue<string>,
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        base: BigNumber;
        quote: BigNumber;
        fee: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    quitMarket(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { base: BigNumber; quote: BigNumber }>;

    removeLiquidity(
      params: IClearingHouse.RemoveLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<IClearingHouse.RemoveLiquidityResponseStructOutput>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDelegateApproval(
      delegateApprovalArg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleAllFunding(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3MintCallback(
      amount0Owed: PromiseOrValue<BigNumberish>,
      amount1Owed: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    versionRecipient(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DelegateApprovalChanged(address)"(
      delegateApproval?: PromiseOrValue<string> | null
    ): DelegateApprovalChangedEventFilter;
    DelegateApprovalChanged(
      delegateApproval?: PromiseOrValue<string> | null
    ): DelegateApprovalChangedEventFilter;

    "FundingPaymentSettled(address,address,int256)"(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      fundingPayment?: null
    ): FundingPaymentSettledEventFilter;
    FundingPaymentSettled(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      fundingPayment?: null
    ): FundingPaymentSettledEventFilter;

    "LiquidityChanged(address,address,address,int24,int24,int256,int256,int128,uint256)"(
      maker?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      quoteToken?: PromiseOrValue<string> | null,
      lowerTick?: null,
      upperTick?: null,
      base?: null,
      quote?: null,
      liquidity?: null,
      quoteFee?: null
    ): LiquidityChangedEventFilter;
    LiquidityChanged(
      maker?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      quoteToken?: PromiseOrValue<string> | null,
      lowerTick?: null,
      upperTick?: null,
      base?: null,
      quote?: null,
      liquidity?: null,
      quoteFee?: null
    ): LiquidityChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PositionChanged(address,address,int256,int256,uint256,int256,int256,uint256)"(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      exchangedPositionSize?: null,
      exchangedPositionNotional?: null,
      fee?: null,
      openNotional?: null,
      realizedPnl?: null,
      sqrtPriceAfterX96?: null
    ): PositionChangedEventFilter;
    PositionChanged(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      exchangedPositionSize?: null,
      exchangedPositionNotional?: null,
      fee?: null,
      openNotional?: null,
      realizedPnl?: null,
      sqrtPriceAfterX96?: null
    ): PositionChangedEventFilter;

    "PositionClosed(address,address,int256,int256,int256,int256,uint256)"(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      closedPositionSize?: null,
      closedPositionNotional?: null,
      openNotional?: null,
      realizedPnl?: null,
      closedPrice?: null
    ): PositionClosedEventFilter;
    PositionClosed(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      closedPositionSize?: null,
      closedPositionNotional?: null,
      openNotional?: null,
      realizedPnl?: null,
      closedPrice?: null
    ): PositionClosedEventFilter;

    "PositionLiquidated(address,address,uint256,uint256,uint256,address)"(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      positionNotional?: null,
      positionSize?: null,
      liquidationFee?: null,
      liquidator?: null
    ): PositionLiquidatedEventFilter;
    PositionLiquidated(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      positionNotional?: null,
      positionSize?: null,
      liquidationFee?: null,
      liquidator?: null
    ): PositionLiquidatedEventFilter;

    "ReferredPositionChanged(bytes32)"(
      referralCode?: PromiseOrValue<BytesLike> | null
    ): ReferredPositionChangedEventFilter;
    ReferredPositionChanged(
      referralCode?: PromiseOrValue<BytesLike> | null
    ): ReferredPositionChangedEventFilter;

    "TrustedForwarderChanged(address)"(
      forwarder?: PromiseOrValue<string> | null
    ): TrustedForwarderChangedEventFilter;
    TrustedForwarderChanged(
      forwarder?: PromiseOrValue<string> | null
    ): TrustedForwarderChangedEventFilter;

    "TrustedForwarderUpdated(address)"(
      trustedForwarder?: null
    ): TrustedForwarderUpdatedEventFilter;
    TrustedForwarderUpdated(
      trustedForwarder?: null
    ): TrustedForwarderUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addLiquidity(
      params: IClearingHouse.AddLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelAllExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      orderIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    closePosition(
      params: IClearingHouse.ClosePositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getDelegateApproval(overrides?: CallOverrides): Promise<BigNumber>;

    getExchange(overrides?: CallOverrides): Promise<BigNumber>;

    getInsuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderBook(overrides?: CallOverrides): Promise<BigNumber>;

    getQuoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      clearingHouseConfigArg: PromiseOrValue<string>,
      vaultArg: PromiseOrValue<string>,
      quoteTokenArg: PromiseOrValue<string>,
      uniV3FactoryArg: PromiseOrValue<string>,
      exchangeArg: PromiseOrValue<string>,
      accountBalanceArg: PromiseOrValue<string>,
      insuranceFundArg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidate(address,address,int256)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      positionSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "liquidate(address,address)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openPositionFor(
      trader: PromiseOrValue<string>,
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    quitMarket(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      params: IClearingHouse.RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelegateApproval(
      delegateApprovalArg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleAllFunding(
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV3MintCallback(
      amount0Owed: PromiseOrValue<BigNumberish>,
      amount1Owed: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    versionRecipient(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      params: IClearingHouse.AddLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelAllExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      orderIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closePosition(
      params: IClearingHouse.ClosePositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegateApproval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInsuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getQuoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniswapV3Factory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      clearingHouseConfigArg: PromiseOrValue<string>,
      vaultArg: PromiseOrValue<string>,
      quoteTokenArg: PromiseOrValue<string>,
      uniV3FactoryArg: PromiseOrValue<string>,
      exchangeArg: PromiseOrValue<string>,
      accountBalanceArg: PromiseOrValue<string>,
      insuranceFundArg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidate(address,address,int256)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      positionSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "liquidate(address,address)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openPositionFor(
      trader: PromiseOrValue<string>,
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quitMarket(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      params: IClearingHouse.RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelegateApproval(
      delegateApprovalArg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleAllFunding(
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3MintCallback(
      amount0Owed: PromiseOrValue<BigNumberish>,
      amount1Owed: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    versionRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
